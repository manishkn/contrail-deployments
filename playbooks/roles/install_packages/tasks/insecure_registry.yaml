---
- name: register /etc/docker/daemon.json
  stat:
    path: /etc/docker/daemon.json
  register: p

- name: create /etc/docker directory
  file:
    path: /etc/docker
    state: directory
    mode: 0755

- name: create emtpy /etc/docker/daemon.json is it doesn't exis
  copy:
    content: ""
    dest: /etc/docker/daemon.json
  when: not p.stat.exists

- name: set default deployment
  vars:
    types:
      kolla:
      contrail:
  set_fact:
    deployment: "{{ deployment|default({})|combine({'type': types }) }}"
  when: deployment is undefined or deployment.type is undefined

- name: set contrailregistry if defined
  set_fact:
    contrailregistry: "{{ deployment.type.contrail.registry }}"
  when: deployment.type is defined and deployment.type.contrail is defined and deployment.type.contrail.registry is defined

- name: set kolla_registry if defined
  set_fact:
    kolla_registry: "{{ deployment.type.kolla.registry }}"
  when: deployment.type is defined and deployment.type.kolla is defined and deployment.type.kolla.registry is defined

- name: set registry string if it is the first one
  set_fact:
    new_reg: "{% raw %}{{% endraw %}\n \"insecure-registries\": [\"{{contrailregistry}}\", \"{{kolla_registry}}\"]\n{% raw %}}{% endraw %}\n"
  when: not p.stat.exists

- name: add 1st registry entry to file
  lineinfile:
    dest: /etc/docker/daemon.json
    line: "{{ new_reg |to_json}}"
  when: not p.stat.exists

- name: read /etc/docker/daemon.json if it exists
  shell: cat /etc/docker/daemon.json
  register: docker_daemon_file

- name: set entries to json
  set_fact:
    docker_daemon: "{{ docker_daemon_file.stdout | from_json }}"

- name: check if registry is already in
  set_fact:
    is_registry_in: True
  when: contrailregistry in item.value and p.stat.exists
  with_dict: "{{ docker_daemon }}"

- name: add registry to list
  set_fact:
    new_docker_registries: "{{ item.value }} + [ '{{ contrailregistry }}' ]"
  when: item.key == "insecure-registries" and is_registry_in is undefined
  with_dict: "{{ docker_daemon }}"

- name: create new registry string
  set_fact:
    reg_string: "{% raw %}{{% endraw %}\n \"insecure-registries\": [{% for arg1 in new_docker_registries %}\"{{arg1}}\"{% if not loop.last %},{% endif %}{% endfor %}]\n{% raw %}}{% endraw %}"
  when: is_registry_in is undefined

- name: empty existing file *danger danger*
  copy:
    content: ""
    dest: /etc/docker/daemon.json
  when: p.stat.exists and is_registry_in is undefined

- name: write to /etc/docker/daemon.json
  lineinfile:
    dest: /etc/docker/daemon.json
    line: "{{ reg_string |to_json}}"
  when: p.stat.exists and is_registry_in is undefined

- name: reload systemd
  shell: systemctl daemon-reload

- name: start docker daemon
  service:
    enabled: yes
    name: docker
    state: restarted
